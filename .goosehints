# Claude RPG - Goose Development Hints

## Project Overview
This is an isometric RPG game built with Python and Pygame. The game features a player character exploring a large world, fighting enemies, collecting items, and managing inventory/equipment. The project has recently undergone significant refactoring.

## Development Documentation
**IMPORTANT**: Check `documents/development/` folder for detailed development plans, implementation guides, and testing checklists:
- `procedural_generation_plan.md` - Main plan for procedural map generation system
- `implementation_details.md` - Technical implementation guide with code examples
- `testing_checklist.md` - Comprehensive testing checklist for new features

Always check this folder first when working on new features or major changes.

## Development Notes
**IMPORTANT**: The user will be running the game during development sessions. The game can be started with:
```bash
cd /Users/mnovich/Development/claude-rpg && ./launch_game.sh
```
Or:
```bash
cd /Users/mnovich/Development/claude-rpg && uv run claude-rpg
```

## Architecture Overview

### Core Game Loop
1. **Entry Point**: `main.py` (root) → `src/main.py:main()` → `src.main:main` (via pyproject.toml)
2. **Game Controller**: `Game` class (`src/game.py`) manages all game states and systems.
3. **Game States**: MENU → PLAYING → PAUSED → GAME_OVER (with transitions)
4. **Main Systems**: Asset Loading (`src/core/assets.py`) → Audio (`src/core/audio.py`) → Level (modules in `src/level/`) → Player (`src/player.py`) → UI (modules in `src/ui/`) → Save/Load (`src/save_system.py`)

### Class Hierarchy & Dependencies (Conceptual)
```
Game (src/game.py) - Main controller
├── AssetLoader (src/core/assets.py) - Loads sprites, sounds, music
│   └── AudioManager (src/core/audio.py) - Handles all audio/music
├── MainMenu (src/ui/menu_coordinator.py, src/ui/menu/) - Menu system
├── Level (src/level/*) - World generation, entity management, rendering logic
│   ├── IsometricRenderer (src/core/isometric.py) - 2D→Iso coordinate conversion
│   ├── EntityManager (src/level/entity_manager.py)
│   ├── BaseEntity (src/entities/base.py) - Base class for game objects
│   │   ├── NPC (src/entities/npc.py)
│   │   ├── Enemy (src/entities/enemy.py)
│   │   ├── Item (src/entities/item.py)
│   │   └── Chest (src/entities/chest.py)
│   └── Player (src/player.py) - Player character
│       └── Inventory (src/ui/inventory.py) - Item management UI
├── SaveSystem (src/save_system.py) - Game persistence
├── Settings (src/settings.py) - Configuration management
└── GameLog (src/core/game_log.py) - Message logging system
```

### File Size & Complexity (Lines of Code) - Approximate
- **player.py** (912 lines) - Player mechanics, inventory, combat, movement
- **entities/spawning.py** (600 lines) - Entity spawning logic
- **wall_renderer.py** (523 lines) - Wall rendering logic (specific usage context TBD)
- **entities/enemy.py** (499 lines) - Enemy entities and AI
- **level/level_pathfinding.py** (476 lines) - Pathfinding within levels
- **template_level.py** (452 lines) - Template level generation
- **map_template.py** (404 lines) - Map template definitions
- **core/audio.py** (354 lines) - Comprehensive audio system (previously src/audio.py)
- **door_pathfinder.py** (340 lines) - Pathfinder for doors
- **door_renderer.py** (309 lines) - Door rendering logic
- **entities/chest.py** (309 lines) - Chest entity logic
- **quest_system.py** (307 lines) - Quest management system
- **level/level_collision.py** (299 lines) - Collision detection in levels
- **level/ui_renderer.py** (261 lines) - Renders UI elements related to the level
- **game.py** (252 lines) - Main game controller and state management
- **ui/inventory.py** (244 lines) - Inventory UI rendering (previously src/inventory.py)
- **entities/npc.py** (205 lines) - NPC entities and dialog
- **level/level_base.py** (195 lines) - Base class/logic for levels
- **level/entity_manager.py** (163 lines) - Manages entities within a level
- **core/assets.py** (162 lines) - Asset loading (previously src/assets.py)
- **level/level_world_gen.py** (168 lines) - Procedural world generation for levels
- **entities/item.py** (141 lines) - Item entities and effects
- **level/level_events.py** (131 lines) - Handles events within a level
- **core/game_log.py** (129 lines) - Message logging system (previously src/game_log.py)
- **core/isometric.py** (128 lines) - Coordinate conversion utilities (previously src/isometric.py)
- **level/level_renderer.py** (118 lines) - Renders the level
- **level/tile_manager.py** (110 lines) - Manages map tiles
- **entities/base.py** (94 lines) - Base entity class
- **save_system.py** (93 lines) - JSON-based save/load system
- **settings.py** (68 lines) - Configuration management
- **level/level_data.py** (68 lines) - Data storage/management for levels
- **level/__init__.py** (62 lines)
*(Note: `menu.py` from old hints (506 lines) is now likely split within `src/ui/menu/` and `src/ui/menu_coordinator.py`. Line counts for those are not individually available yet.)*

## Recent Accomplishments
1. ✅ **Major Project Refactor**:
    - Entity system moved to `src/entities/` (`base.py`, `enemy.py`, etc.).
    - Core utilities (`assets.py`, `audio.py`, `game_log.py`, `isometric.py`) moved to `src/core/`.
    - `level.py` broken down into multiple modules within `src/level/` (`level_renderer.py`, `entity_manager.py`, etc.).
    - UI components (`inventory.py`, `menu/`) moved into `src/ui/`.
2. ✅ **feat: Add `launch_game.sh` script and update enemy/player logic.** (Latest commit)
3. ✅ Fixed bottom menu UI, integrated music system, and other previous enhancements (see older hint versions if details needed).


## Project Structure
```
/Users/mnovich/Development/claude-rpg/
├── src/                              # Main source code (Python package)
│   ├── __init__.py                   # Package initialization
│   ├── core/                         # Core utilities
│   │   ├── __init__.py
│   │   ├── assets.py                 # Asset loading system
│   │   ├── audio.py                  # Audio system (music/SFX)
│   │   ├── game_log.py               # Message logging system
│   │   └── isometric.py              # Coordinate conversion utilities
│   ├── door_pathfinder.py            # Pathfinder for doors
│   ├── door_renderer.py              # Door rendering logic
│   ├── entities/                     # Game entity definitions
│   │   ├── __init__.py
│   │   ├── base.py                   # Base entity class
│   │   ├── chest.py                  # Chest entities
│   │   ├── enemy.py                  # Enemy entities & AI
│   │   ├── item.py                   # Item entities
│   │   ├── npc.py                    # NPC entities
│   │   └── spawning.py               # Entity spawning logic
│   ├── game.py                       # Main game controller & state machine
│   ├── level/                        # Level management and logic
│   │   ├── __init__.py
│   │   ├── entity_manager.py         # Manages entities within a level
│   │   ├── level_base.py             # Base class/logic for levels
│   │   ├── level_collision.py        # Collision detection in levels
│   │   ├── level_data.py             # Data for levels
│   │   ├── level_events.py           # Level-specific event handling
│   │   ├── level_pathfinding.py      # Pathfinding within levels
│   │   ├── level_renderer.py         # Renders the level view
│   │   ├── level_world_gen.py        # Procedural world generation
│   │   ├── tile_manager.py           # Manages map tiles
│   │   └── ui_renderer.py            # Renders UI elements for the level (e.g., bottom bar)
│   ├── main.py                       # Main entry point for the application
│   ├── map_template.py               # Definitions for map templates
│   ├── player.py                     # Player class, inventory logic, combat
│   ├── procedural_generation/        # Algorithms for procedural content (World, Dungeons etc)
│   │   ├── README.md
│   │   ├── ... (other sub-files/dirs)
│   ├── quest_system.py               # Quest management
│   ├── save_system.py                # JSON save/load system
│   ├── settings.py                   # Configuration management
│   ├── template_level.py             # Logic for generating levels from templates
│   ├── ui/                           # User Interface components
│   │   ├── __init__.py
│   │   ├── dialogue.py               # Dialogue UI
│   │   ├── hud.py                    # Heads-Up Display (player stats, messages)
│   │   ├── inventory.py              # Inventory screen UI
│   │   ├── menu/                     # Main menu, pause menu, etc. (directory)
│   │   ├── menu_coordinator.py       # Manages different menu states
│   │   └── shop.py                   # Shop UI
│   └── wall_renderer.py              # Specific wall rendering logic (usage context TBD)
├── assets/                           # Game assets (images, sounds)
│   ├── images/
│   └── sounds/
├── main.py                           # Root entry point (alternative, consider removing if src.main is primary)
├── pyproject.toml                    # Project configuration & dependencies
├── test_game.py                      # Test file
├── launch_game.sh                    # Script to launch the game
└── .goosehints                      # This file - development guidance
```

## Key Navigation Points for Agents

### 🎯 Common Development Tasks & File Locations:

#### UI/Interface Issues:
- **Bottom Menu (Ingame HUD)**: `src/level/ui_renderer.py` (for rendering), `src/player.py` (for data like equipment)
- **Inventory Display**: `src/ui/inventory.py` (rendering), `src/player.py` (data & logic)
- **Menu System (Main/Pause)**: `src/ui/menu/` (specific menu screens), `src/ui/menu_coordinator.py` (flow), `src/core/audio.py` (music)
- **Game HUD (Stats, Log)**: `src/ui/hud.py`, `src/core/game_log.py`

#### Game Mechanics:
- **Player Movement & Actions**: `src/player.py` (`handle_input()`, `update()`)
- **Combat System**: `src/player.py` (player side), `src/entities/enemy.py` (enemy side), `src/level/entity_manager.py` (interactions)
- **Item System (Definition & Effects)**: `src/entities/item.py`
- **Inventory Logic (Use, Equip)**: `src/player.py`

#### World & Entities:
- **Level Generation/Structure**: `src/level/level_world_gen.py`, `src/template_level.py`, `src/map_template.py`, `src/procedural_generation/`
- **Entity Management (Spawning, Tracking)**: `src/level/entity_manager.py`, `src/entities/spawning.py`
- **Enemy AI**: `src/entities/enemy.py` (`update()` method)
- **NPC Logic**: `src/entities/npc.py`
- **Collision Detection**: `src/level/level_collision.py`, `src/player.py` (movement checks)

#### Audio & Assets:
- **Music & Sound Control**: `src/core/audio.py`
- **Asset Loading**: `src/core/assets.py`
- **Sprite Creation/Management**: `src/entities/base.py` (base loading), specific entity files in `src/entities/`

#### Save/Load & Settings:
- **Game Persistence**: `src/save_system.py`
- **Configuration**: `src/settings.py`
- **Game States**: `src/game.py` (state machine)

### 🔧 System Integration Points:
- **Audio Manager Access**: From `AssetLoader` in `src/core/assets.py` (e.g., `game.asset_loader.audio_manager`)
- **Asset Loader Integration**: Passed to game components, entities.
- **Coordinate Conversion**: `src/core/isometric.py`

## Development Patterns & Best Practices
- **Modularity**: Code is heavily modularized (e.g., `src/core`, `src/entities`, `src/level`, `src/ui`). Understand the responsibility of each module.
- **Asset Loading**: `src/core/assets.py` is central. `AssetLoader` instance usually passed around.
- **State Management**: `src/game.py` controls high-level game states. `src/ui/menu_coordinator.py` for menu states.
- **Error Handling**: Check for `None` when accessing potentially unloaded resources (sprites, audio).
*(Previous best practices regarding Pygame, UI positioning, etc., still apply)*
