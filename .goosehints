# Claude RPG - Goose Development Hints

## Project Overview
This is an isometric RPG game built with Python and Pygame. The game features a player character exploring a large world, fighting enemies, collecting items, and managing inventory/equipment.

## Development Notes
**IMPORTANT**: The user will be running the game during development sessions. The game can be started with:
```bash
cd /Users/mnovich/Development/claude-rpg && uv run claude-rpg
```

## Architecture Overview

### Core Game Loop
1. **Entry Point**: `main.py` → `src/main.py:main()` → `src.main:main` (via pyproject.toml)
2. **Game Controller**: `Game` class manages all game states and systems
3. **Game States**: MENU → PLAYING → PAUSED → GAME_OVER (with transitions)
4. **Main Systems**: Asset Loading → Audio → Level → Player → UI → Save/Load

### Class Hierarchy & Dependencies
```
Game (game.py) - Main controller
├── AssetLoader (assets.py) - Loads sprites, sounds, music
│   └── AudioManager (audio.py) - Handles all audio/music
├── MainMenu (menu.py) - Menu system with music integration
├── Level (level.py) - World generation, entity management, UI rendering
│   ├── IsometricRenderer (isometric.py) - 2D→Iso coordinate conversion
│   ├── Entity (entity.py) - Base class for all game objects
│   │   ├── NPC - Non-player characters with dialog
│   │   ├── Enemy - Combat entities with AI
│   │   └── Item - Collectible objects with effects
│   └── Player (player.py) - Player character with inventory
│       └── Inventory (inventory.py) - Item management UI
├── SaveSystem (save_system.py) - Game persistence
├── Settings (settings.py) - Configuration management
└── GameLog (game_log.py) - Message logging system
```

### File Size & Complexity (Lines of Code)
- **level.py** (850 lines) - Largest file, handles world generation, entity spawning, UI rendering
- **player.py** (584 lines) - Player mechanics, inventory, combat, movement
- **entity.py** (517 lines) - All game entities (NPCs, enemies, items) with sprite loading
- **menu.py** (506 lines) - Enhanced menu system with visual effects and music
- **audio.py** (354 lines) - Comprehensive audio system with music/SFX management
- **game.py** (252 lines) - Main game controller and state management
- **inventory.py** (244 lines) - Inventory UI with sprite rendering
- **assets.py** (162 lines) - Asset loading with audio integration
- **isometric.py** (128 lines) - Coordinate conversion utilities
- **game_log.py** (129 lines) - Message logging system
- **save_system.py** (93 lines) - JSON-based save/load system
- **settings.py** (68 lines) - Configuration management

## Recent Major Updates (Latest Session)
### ✅ Bottom Menu UI Fixes
- **Fixed overlapping slots**: Weapon and armor slots now have proper spacing (110px apart instead of 80px)
- **Larger slots**: Increased slot size from 60x60 to 80x80 pixels for better text fit
- **Better positioning**: Moved slots down by 20px (from Y=10 to Y=30) for improved layout
- **Sprite rendering**: Added proper sprite rendering for equipped weapons and armor in bottom menu
- **Text positioning**: Fixed weapon and armor name positioning below slots

### ✅ Music System Integration
- **Added background music support**: Integrated `menu_music.mp3` and `game_music.mp3`
- **Smart music transitions**: Menu music plays in menus, game music during gameplay
- **Volume control**: Music volume set to 15% (0.15) for ambient background audio
- **Pause/resume functionality**: Music pauses with game, resumes on return
- **Fade transitions**: 1000ms fade-in/out effects for smooth music changes
- **State-based music**: Automatic music switching based on game state (menu/game/pause/game over)

## Current Status
**RESOLVED ISSUES**:
1. ✅ Bottom menu UI layout and spacing
2. ✅ Equipment slot sprite rendering 
3. ✅ Background music integration
4. ✅ Music volume balancing

**WORKING FEATURES**:
- Inventory system with proper sprite display
- Equipment slots showing actual item sprites
- Background music system with appropriate volume levels
- Smooth transitions between menu and game music
- Proper UI spacing and text positioning

## Project Structure
```
/Users/mnovich/Development/claude-rpg/
├── src/                  # Main source code (Python package)
│   ├── __init__.py       # Package initialization (4 lines)
│   ├── main.py           # Entry point (31 lines)
│   ├── game.py           # Main game controller (252 lines)
│   ├── level.py          # World generation & UI rendering (850 lines) ⭐ LARGEST
│   ├── player.py         # Player mechanics & inventory (584 lines)
│   ├── entity.py         # Game entities (NPCs, enemies, items) (517 lines)
│   ├── menu.py           # Menu system with music (506 lines)
│   ├── audio.py          # Audio system with music/SFX (354 lines)
│   ├── inventory.py      # Inventory UI rendering (244 lines)
│   ├── assets.py         # Asset loading system (162 lines)
│   ├── isometric.py      # Coordinate conversion utilities (128 lines)
│   ├── game_log.py       # Message logging system (129 lines)
│   ├── save_system.py    # JSON save/load system (93 lines)
│   └── settings.py       # Configuration management (68 lines)
├── assets/               # Game assets
│   ├── images/           # Sprites (PNG format)
│   │   ├── [tiles]       # grass_tile, stone_tile, water_tile, wall_tile, dirt_tile
│   │   ├── [characters]  # player_sprite, goblin_sprite, orc_boss_sprite, npc_shopkeeper
│   │   ├── [objects]     # tree, rock, menu_background
│   │   ├── [weapons]     # iron_sword, steel_axe, bronze_mace, silver_dagger, war_hammer
│   │   ├── [armor]       # leather_armor, chain_mail, plate_armor, studded_leather, scale_mail
│   │   └── [consumables] # health_potion, mana_potion
│   └── sounds/           # Audio files
│       ├── menu_music.mp3    # Background music for menus
│       ├── game_music.mp3    # Background music for gameplay
│       └── [SFX categories]/ # combat/, ui/, environment/, magic/, creatures/, ambient/
├── main.py               # Alternative entry point (37 lines)
├── pyproject.toml        # Project configuration & dependencies
├── test_game.py          # Test file (95 lines)
└── .goosehints          # This file - development guidance
```

## Key Navigation Points for Agents

### 🎯 Common Development Tasks & File Locations:

#### UI/Interface Issues:
- **Bottom Menu**: `src/level.py` lines ~700-800 (`render_ui()` method)
- **Inventory Display**: `src/inventory.py` lines ~40-150 (`render()` method)
- **Menu System**: `src/menu.py` lines ~400-500 (`render_menu_items()` method)
- **Game HUD**: `src/level.py` lines ~600-700 (player stats, game log)

#### Game Mechanics:
- **Player Movement**: `src/player.py` lines ~100-200 (`handle_input()`, `update()`)
- **Combat System**: `src/player.py` lines ~250-350 (`attack_enemy()`, `take_damage()`)
- **Item System**: `src/entity.py` lines ~400-500 (`Item` class)
- **Inventory Logic**: `src/player.py` lines ~350-450 (`use_item()`, equipment methods)

#### World & Entities:
- **Level Generation**: `src/level.py` lines ~50-200 (`generate_level()`, building creation)
- **Entity Spawning**: `src/level.py` lines ~200-350 (`spawn_entities()`, `spawn_items()`)
- **Enemy AI**: `src/entity.py` lines ~250-350 (`Enemy.update()`)
- **Collision Detection**: `src/level.py` lines ~450-550 (`check_collision()`)

#### Audio & Assets:
- **Music Control**: `src/audio.py` lines ~100-200 (music methods)
- **Asset Loading**: `src/assets.py` lines ~50-150 (`load_images()`, `load_sounds()`)
- **Sprite Creation**: `src/entity.py` lines ~50-100 (sprite creation methods)

#### Save/Load & Settings:
- **Game Persistence**: `src/save_system.py` (entire file, 93 lines)
- **Configuration**: `src/settings.py` (entire file, 68 lines)
- **Game States**: `src/game.py` lines ~150-250 (state management)

### 🔧 System Integration Points:
- **Audio Manager Access**: `getattr(self.asset_loader, 'audio_manager', None)`
- **Asset Loader Integration**: Passed to all entities via constructor
- **Game State Transitions**: `src/game.py` lines ~80-150 (event handling)
- **Coordinate Conversion**: `src/isometric.py` (world ↔ screen coordinates)

## Key Files and Recent Changes

### 1. src/level.py - Bottom Menu UI (Lines ~700-800)
- **Equipment display section**: Enhanced weapon and armor slot rendering
- **Sprite integration**: Added proper sprite scaling and positioning
- **Layout improvements**: Better spacing and text positioning

### 2. src/audio.py - Music System
- **Music loading**: Added `load_music()` method for MP3 files
- **Music control**: Added play_music(), stop_music(), pause_music(), resume_music()
- **Volume management**: Set music volume to 15% for ambient background audio
- **State tracking**: Current music tracking and playback status

### 3. src/menu.py - Music Integration
- **Music control methods**: Added start_menu_music() and start_game_music()
- **State transitions**: Music changes appropriately when entering/exiting game
- **Audio manager integration**: Proper audio manager access and control

### 4. src/game.py - Game State Music
- **Pause music handling**: Music pauses when game is paused
- **Game over music**: Returns to menu music on game over
- **State transition music**: Proper music control during state changes

## Asset Loading System
- All sprites are successfully loaded (console shows "Loaded image: iron_sword", etc.)
- Music files are loaded from assets/sounds/ directory
- Asset loader is properly integrated and working
- Individual sprite files exist for all items in assets/images/

## Audio System Details
### Music Files:
- `menu_music.mp3` - Background music for menus
- `game_music.mp3` - Background music during gameplay

### Volume Levels:
- Master Volume: 100% (1.0)
- SFX Volume: 70% (0.7)
- UI Volume: 60% (0.6)
- Ambient Volume: 40% (0.4)
- **Music Volume: 15% (0.15)** - Quiet ambient background

### Music Behavior:
- **Menu Music**: Plays in main menu, pause menu, game over screen
- **Game Music**: Plays during active gameplay
- **Transitions**: 1000ms fade-in/out between music changes
- **Pause/Resume**: Music pauses with game, resumes on return

## Recent Accomplishments
1. ✅ Successfully integrated tree.png and rock.png sprites
2. ✅ Fixed collision detection system  
3. ✅ Balanced enemy movement speeds
4. ✅ Enhanced inventory system with sprite support
5. ✅ Added proper equipment slots with visual previews
6. ✅ **Fixed bottom menu UI - larger slots, proper spacing, sprite rendering**
7. ✅ **Integrated background music system with volume control**
8. ✅ **Added music state management and transitions**

## How to Test
1. Run: `cd /Users/mnovich/Development/claude-rpg && uv run claude-rpg`
2. **Music Testing**: 
   - Menu music should play on startup
   - Game music should start when beginning new game or loading save
   - Music should pause when pressing ESC (pause menu)
   - Music should resume when returning to game
   - Music should return to menu music on game over
3. **UI Testing**:
   - Start new game, pick up weapons/armor, equip them
   - Check bottom menu shows proper sprites and text
   - Verify slots don't overlap and text fits properly
4. Press 'I' to open inventory and verify sprite display

## Expected Behavior
- Bottom menu displays proper weapon/armor sprites with good spacing
- Background music plays appropriately based on game state
- Music volume is ambient (15%) and doesn't interfere with gameplay
- Equipment slots are large enough for text and properly spaced
- Smooth music transitions between menu and game states

## Sprite Files Available
All individual sprite files are loaded successfully:
- Weapons: iron_sword, steel_axe, bronze_mace, silver_dagger, war_hammer
- Armor: leather_armor, chain_mail, plate_armor, studded_leather, scale_mail  
- Consumables: health_potion, mana_potion
- Music: menu_music.mp3, game_music.mp3

## Current State
- Game runs successfully with background music
- Player can move, pick up items, equip items with proper UI display
- Bottom menu shows equipped items with actual sprites (not colored shapes)
- Music system works with appropriate volume levels and state transitions
- All major UI and audio issues have been resolved

## Development Patterns & Best Practices
- **Asset Loading**: Always pass `asset_loader` to entity constructors
- **Audio Integration**: Access via `getattr(self.asset_loader, 'audio_manager', None)`
- **Sprite Scaling**: Use `pygame.transform.scale()` for UI elements
- **State Management**: Use Game class state constants (STATE_MENU, STATE_PLAYING, etc.)
- **Coordinate Conversion**: Use IsometricRenderer for world ↔ screen conversion
- **Error Handling**: Check for None values when accessing audio_manager or sprites
- **UI Positioning**: Use relative positioning and proper spacing calculations
- **Music Transitions**: Always use fade-in/out for smooth audio transitions